// Generated from Datum.g4 by ANTLR 4.11.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DatumLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.11.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_BOOL = 3, TOKEN_TRUE = 4, TOKEN_FALSE = 5, 
    TOKEN_LPAREN = 6, TOKEN_RPAREN = 7, TOKEN_LSQUARE = 8, TOKEN_RSQUARE = 9, 
    TOKEN_SEMICOLON = 10, TOKEN_DASHSEMI = 11, TOKEN_DOT = 12, TOKEN_NUMBER = 13, 
    TOKEN_STRING = 14, TOKEN_SYMBOL = 15, TOKEN_INITIAL = 16, TOKEN_SUBSEQUENT = 17, 
    TOKEN_LETTER = 18, TOKEN_SPECIAL_INITIAL = 19, TOKEN_SPECIAL_SUBSEQUENT = 20, 
    TOKEN_EXPLICIT_SIGN = 21, TOKEN_DASH = 22, TOKEN_EQUALS = 23, TOKEN_NATURAL = 24, 
    TOKEN_DIGIT = 25, TOKEN_LINE_COMMENT = 26, TOKEN_BLOCK_COMMENT = 27, 
    TOKEN_WS = 28;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'BOOL', 'TRUE', 'FALSE', 'LPAREN', 'RPAREN', 'LSQUARE', 
    'RSQUARE', 'SEMICOLON', 'DASHSEMI', 'DOT', 'NUMBER', 'STRING', 'SYMBOL', 
    'INITIAL', 'SUBSEQUENT', 'LETTER', 'SPECIAL_INITIAL', 'SPECIAL_SUBSEQUENT', 
    'EXPLICIT_SIGN', 'DASH', 'EQUALS', 'NATURAL', 'DIGIT', 'LINE_COMMENT', 
    'BLOCK_COMMENT', 'WS'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'''", "'#\\'", null, "'true'", "'false'", "'('", "')'", "'['", 
      "']='", "';'", "'#;'", "'.'", null, null, null, null, null, null, 
      null, null, null, "'#'", "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, "BOOL", "TRUE", "FALSE", "LPAREN", "RPAREN", "LSQUARE", 
      "RSQUARE", "SEMICOLON", "DASHSEMI", "DOT", "NUMBER", "STRING", "SYMBOL", 
      "INITIAL", "SUBSEQUENT", "LETTER", "SPECIAL_INITIAL", "SPECIAL_SUBSEQUENT", 
      "EXPLICIT_SIGN", "DASH", "EQUALS", "NATURAL", "DIGIT", "LINE_COMMENT", 
      "BLOCK_COMMENT", "WS"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DatumLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Datum.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,28,193,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
      27,7,27,1,0,1,0,1,1,1,1,1,1,1,2,1,2,3,2,65,8,2,1,3,1,3,1,3,1,3,1,3,
      1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,
      9,1,10,1,10,1,10,1,11,1,11,1,12,3,12,95,8,12,1,12,1,12,1,12,1,12,3,
      12,101,8,12,1,13,1,13,1,13,1,13,5,13,107,8,13,10,13,12,13,110,9,13,
      1,13,1,13,1,14,1,14,5,14,116,8,14,10,14,12,14,119,9,14,1,14,1,14,5,
      14,123,8,14,10,14,12,14,126,9,14,1,14,3,14,129,8,14,1,15,1,15,3,15,
      133,8,15,1,16,1,16,1,16,3,16,138,8,16,1,17,1,17,1,18,1,18,1,19,1,19,
      1,19,3,19,147,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,4,23,156,8,23,
      11,23,12,23,157,1,24,1,24,1,25,1,25,5,25,164,8,25,10,25,12,25,167,
      9,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,5,26,177,8,26,10,26,12,
      26,180,9,26,1,26,1,26,1,26,1,26,1,26,1,27,4,27,188,8,27,11,27,12,27,
      189,1,27,1,27,3,124,165,178,0,28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
      8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
      39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,1,0,6,1,0,34,
      34,7,0,33,33,36,38,42,47,58,58,60,64,94,95,126,126,2,0,65,90,97,122,
      2,0,43,43,45,45,1,0,48,57,3,0,9,10,13,13,32,32,209,0,1,1,0,0,0,0,3,
      1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
      0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
      0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
      0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
      45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
      1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,64,1,0,0,0,7,66,1,0,0,0,9,71,1,
      0,0,0,11,77,1,0,0,0,13,79,1,0,0,0,15,81,1,0,0,0,17,83,1,0,0,0,19,86,
      1,0,0,0,21,88,1,0,0,0,23,91,1,0,0,0,25,94,1,0,0,0,27,102,1,0,0,0,29,
      128,1,0,0,0,31,132,1,0,0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,141,1,
      0,0,0,39,146,1,0,0,0,41,148,1,0,0,0,43,150,1,0,0,0,45,152,1,0,0,0,
      47,155,1,0,0,0,49,159,1,0,0,0,51,161,1,0,0,0,53,172,1,0,0,0,55,187,
      1,0,0,0,57,58,5,39,0,0,58,2,1,0,0,0,59,60,5,35,0,0,60,61,5,92,0,0,
      61,4,1,0,0,0,62,65,3,7,3,0,63,65,3,9,4,0,64,62,1,0,0,0,64,63,1,0,0,
      0,65,6,1,0,0,0,66,67,5,116,0,0,67,68,5,114,0,0,68,69,5,117,0,0,69,
      70,5,101,0,0,70,8,1,0,0,0,71,72,5,102,0,0,72,73,5,97,0,0,73,74,5,108,
      0,0,74,75,5,115,0,0,75,76,5,101,0,0,76,10,1,0,0,0,77,78,5,40,0,0,78,
      12,1,0,0,0,79,80,5,41,0,0,80,14,1,0,0,0,81,82,5,91,0,0,82,16,1,0,0,
      0,83,84,5,93,0,0,84,85,5,61,0,0,85,18,1,0,0,0,86,87,5,59,0,0,87,20,
      1,0,0,0,88,89,5,35,0,0,89,90,5,59,0,0,90,22,1,0,0,0,91,92,5,46,0,0,
      92,24,1,0,0,0,93,95,3,41,20,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,1,
      0,0,0,96,100,3,47,23,0,97,98,3,23,11,0,98,99,3,47,23,0,99,101,1,0,
      0,0,100,97,1,0,0,0,100,101,1,0,0,0,101,26,1,0,0,0,102,108,5,34,0,0,
      103,104,5,92,0,0,104,107,5,34,0,0,105,107,8,0,0,0,106,103,1,0,0,0,
      106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
      111,1,0,0,0,110,108,1,0,0,0,111,112,5,34,0,0,112,28,1,0,0,0,113,117,
      3,31,15,0,114,116,3,33,16,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,
      1,0,0,0,117,118,1,0,0,0,118,129,1,0,0,0,119,117,1,0,0,0,120,124,5,
      124,0,0,121,123,9,0,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,125,1,
      0,0,0,124,122,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,129,5,124,
      0,0,128,113,1,0,0,0,128,120,1,0,0,0,129,30,1,0,0,0,130,133,3,35,17,
      0,131,133,7,1,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,32,1,0,0,0,134,
      138,3,31,15,0,135,138,3,49,24,0,136,138,3,39,19,0,137,134,1,0,0,0,
      137,135,1,0,0,0,137,136,1,0,0,0,138,34,1,0,0,0,139,140,7,2,0,0,140,
      36,1,0,0,0,141,142,7,1,0,0,142,38,1,0,0,0,143,147,3,41,20,0,144,147,
      3,23,11,0,145,147,5,64,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,
      1,0,0,0,147,40,1,0,0,0,148,149,7,3,0,0,149,42,1,0,0,0,150,151,5,35,
      0,0,151,44,1,0,0,0,152,153,5,61,0,0,153,46,1,0,0,0,154,156,3,49,24,
      0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,
      158,48,1,0,0,0,159,160,7,4,0,0,160,50,1,0,0,0,161,165,5,59,0,0,162,
      164,9,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,166,1,0,0,0,165,163,
      1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,10,0,0,169,170,1,
      0,0,0,170,171,6,25,0,0,171,52,1,0,0,0,172,173,5,35,0,0,173,174,5,59,
      0,0,174,178,1,0,0,0,175,177,9,0,0,0,176,175,1,0,0,0,177,180,1,0,0,
      0,178,179,1,0,0,0,178,176,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,
      181,182,5,59,0,0,182,183,5,35,0,0,183,184,1,0,0,0,184,185,6,26,0,0,
      185,54,1,0,0,0,186,188,7,5,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,
      187,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,6,27,0,0,192,56,
      1,0,0,0,16,0,64,94,100,106,108,117,124,128,132,137,146,157,165,178,
      189,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}