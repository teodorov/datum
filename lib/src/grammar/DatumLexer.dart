// Generated from Datum.g4 by ANTLR 4.11.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DatumLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.11.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_BOOL = 2, TOKEN_TRUE = 3, TOKEN_FALSE = 4, TOKEN_LPAREN = 5, 
    TOKEN_RPAREN = 6, TOKEN_LSQUARE = 7, TOKEN_RSQUARE = 8, TOKEN_SEMICOLON = 9, 
    TOKEN_DASHSEMI = 10, TOKEN_DOT = 11, TOKEN_NUMBER = 12, TOKEN_STRING = 13, 
    TOKEN_SYMBOL = 14, TOKEN_INITIAL = 15, TOKEN_SUBSEQUENT = 16, TOKEN_LETTER = 17, 
    TOKEN_SPECIAL_INITIAL = 18, TOKEN_SPECIAL_SUBSEQUENT = 19, TOKEN_EXPLICIT_SIGN = 20, 
    TOKEN_DASH = 21, TOKEN_EQUALS = 22, TOKEN_NATURAL = 23, TOKEN_DIGIT = 24, 
    TOKEN_LINE_COMMENT = 25, TOKEN_BLOCK_COMMENT = 26, TOKEN_WS = 27;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'BOOL', 'TRUE', 'FALSE', 'LPAREN', 'RPAREN', 'LSQUARE', 'RSQUARE', 
    'SEMICOLON', 'DASHSEMI', 'DOT', 'NUMBER', 'STRING', 'SYMBOL', 'INITIAL', 
    'SUBSEQUENT', 'LETTER', 'SPECIAL_INITIAL', 'SPECIAL_SUBSEQUENT', 'EXPLICIT_SIGN', 
    'DASH', 'EQUALS', 'NATURAL', 'DIGIT', 'LINE_COMMENT', 'BLOCK_COMMENT', 
    'WS'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'#\\'", null, "'true'", "'false'", "'('", "')'", "'['", "']='", 
      "';'", "'#;'", "'.'", null, null, null, null, null, null, null, null, 
      null, "'#'", "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, "BOOL", "TRUE", "FALSE", "LPAREN", "RPAREN", "LSQUARE", 
      "RSQUARE", "SEMICOLON", "DASHSEMI", "DOT", "NUMBER", "STRING", "SYMBOL", 
      "INITIAL", "SUBSEQUENT", "LETTER", "SPECIAL_INITIAL", "SPECIAL_SUBSEQUENT", 
      "EXPLICIT_SIGN", "DASH", "EQUALS", "NATURAL", "DIGIT", "LINE_COMMENT", 
      "BLOCK_COMMENT", "WS"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DatumLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Datum.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,27,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,
      0,1,0,1,0,1,1,1,1,3,1,61,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
      3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,
      1,10,1,11,3,11,91,8,11,1,11,1,11,1,11,1,11,3,11,97,8,11,1,12,1,12,
      1,12,1,12,5,12,103,8,12,10,12,12,12,106,9,12,1,12,1,12,1,13,1,13,5,
      13,112,8,13,10,13,12,13,115,9,13,1,13,1,13,5,13,119,8,13,10,13,12,
      13,122,9,13,1,13,3,13,125,8,13,1,14,1,14,3,14,129,8,14,1,15,1,15,1,
      15,3,15,134,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,3,18,143,8,18,
      1,19,1,19,1,20,1,20,1,21,1,21,1,22,4,22,152,8,22,11,22,12,22,153,1,
      23,1,23,1,24,1,24,5,24,160,8,24,10,24,12,24,163,9,24,1,24,1,24,1,24,
      1,24,1,25,1,25,1,25,1,25,5,25,173,8,25,10,25,12,25,176,9,25,1,25,1,
      25,1,25,1,25,1,25,1,26,4,26,184,8,26,11,26,12,26,185,1,26,1,26,3,120,
      161,174,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
      12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
      23,47,24,49,25,51,26,53,27,1,0,6,1,0,34,34,7,0,33,33,36,38,42,47,58,
      58,60,64,94,95,126,126,2,0,65,90,97,122,2,0,43,43,45,45,1,0,48,57,
      3,0,9,10,13,13,32,32,205,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
      0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
      0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
      0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
      0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
      49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,60,1,0,0,0,5,62,
      1,0,0,0,7,67,1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,79,
      1,0,0,0,17,82,1,0,0,0,19,84,1,0,0,0,21,87,1,0,0,0,23,90,1,0,0,0,25,
      98,1,0,0,0,27,124,1,0,0,0,29,128,1,0,0,0,31,133,1,0,0,0,33,135,1,0,
      0,0,35,137,1,0,0,0,37,142,1,0,0,0,39,144,1,0,0,0,41,146,1,0,0,0,43,
      148,1,0,0,0,45,151,1,0,0,0,47,155,1,0,0,0,49,157,1,0,0,0,51,168,1,
      0,0,0,53,183,1,0,0,0,55,56,5,35,0,0,56,57,5,92,0,0,57,2,1,0,0,0,58,
      61,3,5,2,0,59,61,3,7,3,0,60,58,1,0,0,0,60,59,1,0,0,0,61,4,1,0,0,0,
      62,63,5,116,0,0,63,64,5,114,0,0,64,65,5,117,0,0,65,66,5,101,0,0,66,
      6,1,0,0,0,67,68,5,102,0,0,68,69,5,97,0,0,69,70,5,108,0,0,70,71,5,115,
      0,0,71,72,5,101,0,0,72,8,1,0,0,0,73,74,5,40,0,0,74,10,1,0,0,0,75,76,
      5,41,0,0,76,12,1,0,0,0,77,78,5,91,0,0,78,14,1,0,0,0,79,80,5,93,0,0,
      80,81,5,61,0,0,81,16,1,0,0,0,82,83,5,59,0,0,83,18,1,0,0,0,84,85,5,
      35,0,0,85,86,5,59,0,0,86,20,1,0,0,0,87,88,5,46,0,0,88,22,1,0,0,0,89,
      91,3,39,19,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,96,3,45,
      22,0,93,94,3,21,10,0,94,95,3,45,22,0,95,97,1,0,0,0,96,93,1,0,0,0,96,
      97,1,0,0,0,97,24,1,0,0,0,98,104,5,34,0,0,99,100,5,92,0,0,100,103,5,
      34,0,0,101,103,8,0,0,0,102,99,1,0,0,0,102,101,1,0,0,0,103,106,1,0,
      0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,
      0,107,108,5,34,0,0,108,26,1,0,0,0,109,113,3,29,14,0,110,112,3,31,15,
      0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,
      114,125,1,0,0,0,115,113,1,0,0,0,116,120,5,124,0,0,117,119,9,0,0,0,
      118,117,1,0,0,0,119,122,1,0,0,0,120,121,1,0,0,0,120,118,1,0,0,0,121,
      123,1,0,0,0,122,120,1,0,0,0,123,125,5,124,0,0,124,109,1,0,0,0,124,
      116,1,0,0,0,125,28,1,0,0,0,126,129,3,33,16,0,127,129,7,1,0,0,128,126,
      1,0,0,0,128,127,1,0,0,0,129,30,1,0,0,0,130,134,3,29,14,0,131,134,3,
      47,23,0,132,134,3,37,18,0,133,130,1,0,0,0,133,131,1,0,0,0,133,132,
      1,0,0,0,134,32,1,0,0,0,135,136,7,2,0,0,136,34,1,0,0,0,137,138,7,1,
      0,0,138,36,1,0,0,0,139,143,3,39,19,0,140,143,3,21,10,0,141,143,5,64,
      0,0,142,139,1,0,0,0,142,140,1,0,0,0,142,141,1,0,0,0,143,38,1,0,0,0,
      144,145,7,3,0,0,145,40,1,0,0,0,146,147,5,35,0,0,147,42,1,0,0,0,148,
      149,5,61,0,0,149,44,1,0,0,0,150,152,3,47,23,0,151,150,1,0,0,0,152,
      153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,46,1,0,0,0,155,156,
      7,4,0,0,156,48,1,0,0,0,157,161,5,59,0,0,158,160,9,0,0,0,159,158,1,
      0,0,0,160,163,1,0,0,0,161,162,1,0,0,0,161,159,1,0,0,0,162,164,1,0,
      0,0,163,161,1,0,0,0,164,165,5,10,0,0,165,166,1,0,0,0,166,167,6,24,
      0,0,167,50,1,0,0,0,168,169,5,35,0,0,169,170,5,59,0,0,170,174,1,0,0,
      0,171,173,9,0,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,175,1,0,0,0,
      174,172,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,5,59,0,0,178,
      179,5,35,0,0,179,180,1,0,0,0,180,181,6,25,0,0,181,52,1,0,0,0,182,184,
      7,5,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,
      0,0,0,186,187,1,0,0,0,187,188,6,26,0,0,188,54,1,0,0,0,16,0,60,90,96,
      102,104,113,120,124,128,133,142,153,161,174,185,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}