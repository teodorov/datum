// Generated from Datum.g4 by ANTLR 4.11.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class DatumLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.11.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_BOOL = 1, TOKEN_TRUE = 2, TOKEN_FALSE = 3, TOKEN_LPAREN = 4, TOKEN_RPAREN = 5, 
    TOKEN_LSQUARE = 6, TOKEN_RSQUARE = 7, TOKEN_SEMICOLON = 8, TOKEN_DASHSEMI = 9, 
    TOKEN_DOT = 10, TOKEN_NUMBER = 11, TOKEN_STRING = 12, TOKEN_SYMBOL = 13, 
    TOKEN_INITIAL = 14, TOKEN_SUBSEQUENT = 15, TOKEN_LETTER = 16, TOKEN_SPECIAL_INITIAL = 17, 
    TOKEN_SPECIAL_SUBSEQUENT = 18, TOKEN_EXPLICIT_SIGN = 19, TOKEN_DASH = 20, 
    TOKEN_EQUALS = 21, TOKEN_CHARACTER = 22, TOKEN_NATURAL = 23, TOKEN_DIGIT = 24, 
    TOKEN_LINE_COMMENT = 25, TOKEN_BLOCK_COMMENT = 26, TOKEN_WS = 27;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'BOOL', 'TRUE', 'FALSE', 'LPAREN', 'RPAREN', 'LSQUARE', 'RSQUARE', 'SEMICOLON', 
    'DASHSEMI', 'DOT', 'NUMBER', 'STRING', 'SYMBOL', 'INITIAL', 'SUBSEQUENT', 
    'LETTER', 'SPECIAL_INITIAL', 'SPECIAL_SUBSEQUENT', 'EXPLICIT_SIGN', 
    'DASH', 'EQUALS', 'CHARACTER', 'NATURAL', 'DIGIT', 'LINE_COMMENT', 'BLOCK_COMMENT', 
    'WS'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, null, "'true'", "'false'", "'('", "')'", "'['", "']='", "';'", 
      "'#;'", "'.'", null, null, null, null, null, null, null, null, null, 
      "'#'", "'='"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, "BOOL", "TRUE", "FALSE", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
      "SEMICOLON", "DASHSEMI", "DOT", "NUMBER", "STRING", "SYMBOL", "INITIAL", 
      "SUBSEQUENT", "LETTER", "SPECIAL_INITIAL", "SPECIAL_SUBSEQUENT", "EXPLICIT_SIGN", 
      "DASH", "EQUALS", "CHARACTER", "NATURAL", "DIGIT", "LINE_COMMENT", 
      "BLOCK_COMMENT", "WS"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  DatumLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'Datum.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,27,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
      7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,
      0,1,0,3,0,58,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
      3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,3,10,
      88,8,10,1,10,1,10,1,10,1,10,3,10,94,8,10,1,11,1,11,1,11,1,11,5,11,
      100,8,11,10,11,12,11,103,9,11,1,11,1,11,1,12,1,12,5,12,109,8,12,10,
      12,12,12,112,9,12,1,12,1,12,5,12,116,8,12,10,12,12,12,119,9,12,1,12,
      3,12,122,8,12,1,13,1,13,3,13,126,8,13,1,14,1,14,1,14,3,14,131,8,14,
      1,15,1,15,1,16,1,16,1,17,1,17,1,17,3,17,140,8,17,1,18,1,18,1,19,1,
      19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,4,22,154,8,22,11,22,12,
      22,155,1,23,1,23,1,24,1,24,5,24,162,8,24,10,24,12,24,165,9,24,1,24,
      1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,175,8,25,10,25,12,25,178,9,
      25,1,25,1,25,1,25,1,25,1,25,1,26,4,26,186,8,26,11,26,12,26,187,1,26,
      1,26,3,117,163,176,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
      10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
      21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,6,1,0,34,34,7,0,33,33,36,
      38,42,47,58,58,60,64,94,95,126,126,2,0,65,90,97,122,2,0,43,43,45,45,
      1,0,48,57,3,0,9,10,13,13,32,32,207,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
      0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
      0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
      27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
      1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
      0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,57,1,0,0,0,3,59,1,0,
      0,0,5,64,1,0,0,0,7,70,1,0,0,0,9,72,1,0,0,0,11,74,1,0,0,0,13,76,1,0,
      0,0,15,79,1,0,0,0,17,81,1,0,0,0,19,84,1,0,0,0,21,87,1,0,0,0,23,95,
      1,0,0,0,25,121,1,0,0,0,27,125,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,
      0,33,134,1,0,0,0,35,139,1,0,0,0,37,141,1,0,0,0,39,143,1,0,0,0,41,145,
      1,0,0,0,43,147,1,0,0,0,45,153,1,0,0,0,47,157,1,0,0,0,49,159,1,0,0,
      0,51,170,1,0,0,0,53,185,1,0,0,0,55,58,3,3,1,0,56,58,3,5,2,0,57,55,
      1,0,0,0,57,56,1,0,0,0,58,2,1,0,0,0,59,60,5,116,0,0,60,61,5,114,0,0,
      61,62,5,117,0,0,62,63,5,101,0,0,63,4,1,0,0,0,64,65,5,102,0,0,65,66,
      5,97,0,0,66,67,5,108,0,0,67,68,5,115,0,0,68,69,5,101,0,0,69,6,1,0,
      0,0,70,71,5,40,0,0,71,8,1,0,0,0,72,73,5,41,0,0,73,10,1,0,0,0,74,75,
      5,91,0,0,75,12,1,0,0,0,76,77,5,93,0,0,77,78,5,61,0,0,78,14,1,0,0,0,
      79,80,5,59,0,0,80,16,1,0,0,0,81,82,5,35,0,0,82,83,5,59,0,0,83,18,1,
      0,0,0,84,85,5,46,0,0,85,20,1,0,0,0,86,88,3,37,18,0,87,86,1,0,0,0,87,
      88,1,0,0,0,88,89,1,0,0,0,89,93,3,45,22,0,90,91,3,19,9,0,91,92,3,45,
      22,0,92,94,1,0,0,0,93,90,1,0,0,0,93,94,1,0,0,0,94,22,1,0,0,0,95,101,
      5,34,0,0,96,97,5,92,0,0,97,100,5,34,0,0,98,100,8,0,0,0,99,96,1,0,0,
      0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,
      104,1,0,0,0,103,101,1,0,0,0,104,105,5,34,0,0,105,24,1,0,0,0,106,110,
      3,27,13,0,107,109,3,29,14,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,
      1,0,0,0,110,111,1,0,0,0,111,122,1,0,0,0,112,110,1,0,0,0,113,117,5,
      124,0,0,114,116,9,0,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,118,1,
      0,0,0,117,115,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,122,5,124,
      0,0,121,106,1,0,0,0,121,113,1,0,0,0,122,26,1,0,0,0,123,126,3,31,15,
      0,124,126,7,1,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,28,1,0,0,0,127,
      131,3,27,13,0,128,131,3,47,23,0,129,131,3,35,17,0,130,127,1,0,0,0,
      130,128,1,0,0,0,130,129,1,0,0,0,131,30,1,0,0,0,132,133,7,2,0,0,133,
      32,1,0,0,0,134,135,7,1,0,0,135,34,1,0,0,0,136,140,3,37,18,0,137,140,
      3,19,9,0,138,140,5,64,0,0,139,136,1,0,0,0,139,137,1,0,0,0,139,138,
      1,0,0,0,140,36,1,0,0,0,141,142,7,3,0,0,142,38,1,0,0,0,143,144,5,35,
      0,0,144,40,1,0,0,0,145,146,5,61,0,0,146,42,1,0,0,0,147,148,5,35,0,
      0,148,149,5,92,0,0,149,150,1,0,0,0,150,151,9,0,0,0,151,44,1,0,0,0,
      152,154,3,47,23,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,
      155,156,1,0,0,0,156,46,1,0,0,0,157,158,7,4,0,0,158,48,1,0,0,0,159,
      163,5,59,0,0,160,162,9,0,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,164,
      1,0,0,0,163,161,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,
      10,0,0,167,168,1,0,0,0,168,169,6,24,0,0,169,50,1,0,0,0,170,171,5,35,
      0,0,171,172,5,59,0,0,172,176,1,0,0,0,173,175,9,0,0,0,174,173,1,0,0,
      0,175,178,1,0,0,0,176,177,1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,
      178,176,1,0,0,0,179,180,5,59,0,0,180,181,5,35,0,0,181,182,1,0,0,0,
      182,183,6,25,0,0,183,52,1,0,0,0,184,186,7,5,0,0,185,184,1,0,0,0,186,
      187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,
      6,26,0,0,190,54,1,0,0,0,16,0,57,87,93,99,101,110,117,121,125,130,139,
      155,163,176,187,1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}